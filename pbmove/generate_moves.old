#ifndef GENERATE_MOVES_H_INCLUDED
#define GENERATE_MOVES_H_INCLUDED

#include <vector>

struct triple
{
  size_t top;
  size_t middle;
  size_t bottom;
};


std::vector<size_t> main_left_slant(size_t mysize)
{
  std::vector<size_t> out;
  size_t peghole = 0;
  size_t diff = 1;
  while(peghole < mysize)
  {
    out.push_back(peghole);
    peghole += diff;
    ++diff;
  }
  return out;
}

std::vector<size_t> main_right_slant(size_t mysize)
{
  std::vector<size_t> out;
  size_t peghole = 0;
  size_t diff = 2;
  while(peghole < mysize)
  {
    out.push_back(peghole);
    peghole += diff;
    ++diff;
  }
  return out;
}

std::vector<size_t> advance_left_slant(std::vector<size_t> myslant)
{
  std::vector<size_t> out;
  for(size_t index = 1; index < myslant.size(); ++index) out.push_back(myslant[index] + 1);
  return out;
}

std::vector<size_t> advance_right_slant(std::vector<size_t> myslant)
{
  std::vector<size_t> out;
  for(size_t index = 1; index < myslant.size(); ++index) out.push_back(myslant[index] - 1);
  return out;
}

std::vector<std::vector<size_t> > make_left_slants(size_t mysize)
{
  std::vector<std::vector<size_t> > out;
  std::vector<size_t> slant = main_left_slant(mysize);
  out.push_back(slant);
  while(slant.size() > 3)
  {
    slant = advance_left_slant(slant);
    out.push_back(slant);
  }
  return out;
}

std::vector<std::vector<size_t> > make_right_slants(size_t mysize)
{
  std::vector<std::vector<size_t> > out;
  std::vector<size_t> slant = main_right_slant(mysize);
  out.push_back(slant);
  while(slant.size() > 3)
  {
    slant = advance_right_slant(slant);
    out.push_back(slant);
  }
  return out;
}

std::vector<std::vector<size_t> > make_straight_slants(size_t mysize)
{
  std::vector<std::vector<size_t> > out;
  std::vector<size_t> row;
  size_t diff = 4;
  size_t threshold = 5;
  for(size_t index = 3; index < mysize; ++index)
  {
    row.push_back(index);
    if(!(index < threshold))
    {
      out.push_back(row);
      row.clear();
      threshold += diff;
      ++diff;
    }
  }
  return out;
}

std::vector<std::vector<size_t> > make_slants(size_t mysize)
{
  std::vector<std::vector<size_t> > out;
  for(std::vector<size_t> row : make_left_slants(mysize)) out.push_back(row);
  for(std::vector<size_t> row : make_right_slants(mysize)) out.push_back(row);
  for(std::vector<size_t> row : make_straight_slants(mysize)) out.push_back(row);
  return out;
}

std::vector<triple> make_triples(size_t mysize)
{
  std::vector<triple> out;
  std::vector<std::vector<size_t> > slants = make_slants(mysize);
  for(std::vector<size_t> sl : slants)
  {
    for(size_t index = 0; index < sl.size() - 2; ++index)
    {
      triple t;
      t.top = sl[index];
      t.middle = sl[index + 1];
      t.bottom = sl[index + 2];
      out.push_back(t);
    }
  }
  return out;
}

#endif //GENERATE_MOVES_H_INCLUDED